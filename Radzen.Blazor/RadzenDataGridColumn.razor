@implements IDisposable
@typeparam TItem
@code {
    [CascadingParameter]
    public RadzenDataGrid<TItem> Grid { get; set; }

    protected override void OnInitialized()
    {
        if (Grid != null)
        {
            Grid.AddColumn(this);

            if (!string.IsNullOrEmpty(Property))
            {
                propertyValueGetter = PropertyAccess.Getter<TItem, object>(Property);
            }

            var property = GetFilterProperty();

            if (!string.IsNullOrEmpty(property))
            {
                _filterPropertyType = PropertyAccess.GetPropertyType(typeof(TItem), property);
            }
        }
    }

    [Parameter]
    public bool Visible { get; set; } = true;

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Property { get; set; }

    [Parameter]
    public string SortProperty { get; set; }

    [Parameter]
    public string FilterProperty { get; set; }

    [Parameter]
    public object FilterValue { get; set; }

    [Parameter]
    public object SecondFilterValue { get; set; }

    [Parameter]
    public string Width { get; set; }

    [Parameter]
    public string Format { get; set; }

    [Parameter]
    public string FormatString { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public string HeaderCssClass { get; set; }

    [Parameter]
    public string FooterCssClass { get; set; }

    [Parameter]
    public bool Filterable { get; set; } = true;

    [Parameter]
    public bool Sortable { get; set; } = true;

    [Parameter]
    public bool Frozen { get; set; }

    [Parameter]
    public TextAlign TextAlign { get; set; } = TextAlign.Left;

    [Parameter]
    public RenderFragment<TItem> Template { get; set; }

    [Parameter]
    public RenderFragment<TItem> EditTemplate { get; set; }

    [Parameter]
    public RenderFragment HeaderTemplate { get; set; }

    [Parameter]
    public RenderFragment FooterTemplate { get; set; }

    [Parameter]
    public RenderFragment<RadzenDataGridColumn<TItem>> FilterTemplate { get; set; }

    [Parameter]
    public LogicalFilterOperator LogicalFilterOperator { get; set; } = LogicalFilterOperator.And;

    Func<TItem, object> propertyValueGetter;

    public object GetValue(TItem item)
    {
        return propertyValueGetter != null ? propertyValueGetter(item) : "";
    }

    internal object GetHeader()
    {
        if (HeaderTemplate != null)
        {
            return HeaderTemplate;
        }
        else if (!string.IsNullOrEmpty(Title))
        {
            return Title;
        }
        else
        {
            return Property;
        }
    }

    public string GetStyle(bool forCell = false)
    {
        var style = new List<string>();

        var width = GetWidth();

        if (width != null)
        {
            style.Add($"width:{width}");
        }
        else if (Grid != null && Grid.ColumnWidth != null)
        {
            style.Add($"width:{Grid.ColumnWidth}");
        }

        if (forCell && TextAlign != TextAlign.Left)
        {
            style.Add($"text-align:{Enum.GetName(typeof(TextAlign), TextAlign).ToLower()};");
        }

        if (forCell && Frozen)
        {
            var left = Grid.ColumnsCollection
                .TakeWhile((c, i) => Grid.ColumnsCollection.IndexOf(this) > i && c.Frozen)
                .Sum(c => {
                    var w = !string.IsNullOrEmpty(c.GetWidth()) ? c.GetWidth() : Grid.ColumnWidth;
                    return !string.IsNullOrEmpty(w) && w.Contains("px") ? int.Parse(w.Replace("px", "")) : 200;
                });

            style.Add($"left:{left}px");
        }

        return string.Join(";", style);
    }

    public string GetSortProperty()
    {
        if (!string.IsNullOrEmpty(SortProperty))
        {
            return SortProperty;
        }
        else
        {
            return Property;
        }
    }

    public string GetFilterProperty()
    {
        if (!string.IsNullOrEmpty(FilterProperty))
        {
            return FilterProperty;
        }
        else
        {
            return Property;
        }
    }

    Type _filterPropertyType;

    internal Type FilterPropertyType
    {
        get
        {
            return _filterPropertyType;
        }
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.DidParameterChange(nameof(Visible), Visible) ||
            parameters.DidParameterChange(nameof(Title), Title))
        {
            if (Grid != null)
            {
                await Grid.ChangeState();
            }
        }

        await base.SetParametersAsync(parameters);
    }

    internal void SetFilterValue(object value, bool isFirst = true)
    {
        if (Format == "date-time-offset" && value != null && value is DateTime?)
        {
            DateTimeOffset? offset = DateTime.SpecifyKind((DateTime)value, DateTimeKind.Utc);
            value = offset;
        }

        if (isFirst)
        {
            FilterValue = value;
        }
        else
        {
            SecondFilterValue = value;
        }
    }

    [Parameter]
    public FilterOperator FilterOperator { get; set; }

    [Parameter]
    public FilterOperator SecondFilterOperator { get; set; }

    internal void SetFilterOperator(FilterOperator value)
    {
        FilterOperator = value;
    }

    internal void SetSecondFilterOperator(FilterOperator value)
    {
        SecondFilterOperator = value;
    }

    internal void SetLogicalFilterOperator(LogicalFilterOperator value)
    {
        LogicalFilterOperator = value;
    }

    string runtimeWidth;
    internal void SetWidth(string value)
    {
        runtimeWidth = value;
    }

    internal string GetWidth()
    {
        return !string.IsNullOrEmpty(runtimeWidth) ? runtimeWidth : Width;
    }

    public void Dispose()
    {
        Grid?.RemoveColumn(this);
    }
}
